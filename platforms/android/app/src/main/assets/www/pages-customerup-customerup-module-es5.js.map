{"version":3,"sources":["webpack:///src/app/pages/customerup/customerup.page.html","webpack:///src/app/pages/customerup/customerup-routing.module.ts","webpack:///src/app/pages/customerup/customerup.module.ts","webpack:///src/app/pages/customerup/customerup.page.scss","webpack:///src/app/pages/customerup/customerup.page.ts"],"names":["routes","path","component","CustomerupPageRoutingModule","imports","forChild","exports","CustomerupPageModule","declarations","CustomerupPage","router","apiService","formBuilder","busyService","errorMessage","successMessage","form","group","email","required","id","userId","name","phone","userinfo","JSON","parse","window","localStorage","getItem","getdata","working","Get","then","res","get","setValue","err","message","presentAlert","Put","selector","template"],"mappings":"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","file":"pages-customerup-customerup-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"secondary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title class=\\\"ion-text-center\\\">Mi Cuenta</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content  id=\\\"signup\\\" fullscreen  class=\\\"backgeneral\\\">\\n  <div class=\\\"section_two ion-padding\\\">\\n  <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"tryRegister(form.value)\\\">\\n    <ion-progress-bar *ngIf=\\\"working\\\" color=\\\"secondary\\\" type=\\\"indeterminate\\\"></ion-progress-bar>\\n    <input type=\\\"hidden\\\" formControlName=\\\"id\\\">\\n    <input type=\\\"hidden\\\" formControlName=\\\"userId\\\">\\n         <ion-item class=\\\"itemcolor1\\\">\\n            <ion-input formControlName=\\\"name\\\" type=\\\"text\\\" placeholder=\\\"Nombres\\\"  required></ion-input>\\n          </ion-item>\\n\\n          <ion-item class=\\\"itemcolor1\\\">\\n            <ion-input formControlName=\\\"phone\\\"  type=\\\"text\\\" placeholder=\\\"Teléfono\\\"  required></ion-input>\\n          </ion-item>\\n              \\n            <ion-item class=\\\"itemcolor1\\\">\\n              <ion-input formControlName=\\\"email\\\" readonly=\\\"readonly\\\" type=\\\"text\\\" placeholder=\\\"Correo\\\"  required></ion-input>\\n            </ion-item> \\n\\n          <div class=\\\"buttons ion-padding-top\\\">\\n            <ion-button expand=\\\"block\\\" color=\\\"secondary\\\"  shape=\\\"round\\\" type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\" >Actualizar</ion-button>\\n          </div>\\n  </form>\\n</div>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CustomerupPage } from './customerup.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CustomerupPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CustomerupPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CustomerupPageRoutingModule } from './customerup-routing.module';\n\nimport { CustomerupPage } from './customerup.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    CustomerupPageRoutingModule\n  ],\n  declarations: [CustomerupPage]\n})\nexport class CustomerupPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2N1c3RvbWVydXAvY3VzdG9tZXJ1cC5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from '../../services/api.service';\nimport { Router} from '@angular/router';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { BusyService } from '../../services/busy.service';\n\n@Component({\n  selector: 'app-customerup',\n  templateUrl: './customerup.page.html',\n  styleUrls: ['./customerup.page.scss'],\n})\nexport class CustomerupPage implements OnInit {\n\n  errorMessage: string = '';\n  successMessage: string = '';\n  form : FormGroup;\n  working:boolean;\n  userinfo:any;\n  constructor(private router:Router,private apiService:ApiService,\n    private formBuilder: FormBuilder,private busyService:BusyService) { \n      this.form = this.formBuilder.group({\n        email: ['' , [Validators.required]],\n        id: ['', [Validators.required]],\n        userId: ['', [Validators.required]],\n        name: ['', { \n          required: false,\n        }],\n        phone: [''],\n      },);\n    }\n\n  ngOnInit() {\n   \n  }\n  \n  ionViewWillEnter(){\n    this.userinfo= JSON.parse(window.localStorage.getItem(\"userinfo\"));\n    this.getdata();\n  }\n  getdata(){\n    this.working=true;\n    this.apiService.Get(\"Customers/CustomerUser/\"+this.userinfo.id ).then(res=>{\n      this.working=false;\n       this.form.get(\"email\").setValue(res.email);\n       this.form.get(\"name\").setValue(res.name);\n       this.form.get(\"phone\").setValue(res.phone);\n       this.form.get(\"userId\").setValue(res.userId);\n       this.form.get(\"id\").setValue(res.id);  \n    }, err => {\n      this.working=false;\n       this.errorMessage = err.message;\n         this.busyService.presentAlert(\"¡Información!\",\"Error al consultar información de su cuenta\");\n     });\n  }\n  async tryRegister(form){\n   \n    this.working=true;\n    this.apiService.Put(form,\"Customers/\" + form.id)\n     .then(res => {\n      this.working=false;\n       this.errorMessage = \"\";     \n        this.busyService.presentAlert(\"¡Información!\",\"Cuenta Actualizada Exitosamente\");\n        this.getdata();\n     }, err => {\n      this.working=false;\n       this.errorMessage = err.message;\n         this.busyService.presentAlert(\"¡Información!\",\"No fue posible crear la cuenta\");\n     })\n  }\n\n}\n"]}